pipeline{
    agent any;
    tools{
        maven 'Maven'
        jdk 'JDK'
    }
     
    stages{
        stage("build"){
            steps{
                sh 'mvn clean'
                sh 'mvn -f app/pom.xml compile'
            }
            post{
                success{
                    echo "========Maven compile stage executed successfully========"
                }
                failure{
                    echo "========Maven compile stage execution failed========"
                }
            }
        }
    
     stage("Test and Package"){
            steps{
                echo "Maven Test and package"
                sh 'mvn -f app/pom.xml -Dmaven.test.failure.ignore=true  test package'
                
            }
            post{
                success{
                    echo "========Maven Test stage executed successfully========"
                     junit 'app/target/surefire-reports/*.xml'

                }
                failure{
                    echo "========Maven Test stage execution failed========"
                     junit 'app/target/surefire-reports/*.xml'
                }
            }
        }
        
         
         /*stage( 'SonarQube analysis'){
            steps {
              withSonarQubeEnv('sonar') {
                sh 'mvn -f app/pom.xml sonar:sonar'
              }
            }
        }*/

        stage('Docker build'){
            steps{
                sh 'docker-compose up -d'
            }
        }

       stage("commiting the deocker images"){
            steps{
                bat "docker commit kanban-ui bharathvelisala/challenge-ui"
                bat "docker commit kanban-app bharathvelisala/challenge-app" 
            }
        }

        stage("pushing the images to docker hub"){
            steps{
                withDockerRegistry([ credentialsId: "83fb3bd9-d130-41d3-b0f9-3599a244c460", url: "" ]){
                    bat "docker push ravitejamanepalli/todo_app"
                    bat "docker push ravitejamanepalli/nginx:1.13"
                }
            }
        }



    }
}