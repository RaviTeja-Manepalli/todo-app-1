pipeline{
    agent any;
    tools{
        maven 'Maven'
        jdk 'JDK'
    }
     
    stages{
        stage("build"){
            steps{
                sh 'mvn clean'
                sh 'mvn -f app/pom.xml compile'
            }
            post{
                success{
                    echo "========Maven compile stage executed successfully========"
                }
                failure{
                    echo "========Maven compile stage execution failed========"
                }
            }
        }
    
     stage("Test and Package"){
            steps{
                echo "Maven Test and package"
                sh 'mvn -f app/pom.xml -Dmaven.test.failure.ignore=true  test package'
                
            }
            post{
                success{
                    echo "========Maven Test stage executed successfully========"
                     junit 'app/target/surefire-reports/*.xml'

                }
                failure{
                    echo "========Maven Test stage execution failed========"
                     junit 'app/target/surefire-reports/*.xml'
                }
            }
        }
        
         
         stage( 'SonarQube analysis'){
            steps {
              withSonarQubeEnv('sonar') 
              {
                sh 'mvn -f app/pom.xml sonar:sonar'
              }
            }
        }


        stage("Quality Gate") {
            steps {
              
              timeout(time: 1, unit: 'HOURS') {
                script{
                
                        def qg = waitForQualityGate() 
                        if (qg.status != 'OK')
                        {
                            error "Pipeline failed due to gate failure "
                            
                        }
                    }
               }
             
            }
        } 


      /*  stage('deploy to artifactory')
        {
          steps{
     
             rtUpload (
                 serverId: 'ARTIFACTORY_SERVER',
             spec: '''{
             "files": [
            {
               "pattern": "target/*.jar",
              "target": "arti-maven-dev-loc/"
            }
         ]
        }''',
 
            buildName: 'Math Operation',
            buildNumber: '42'
         )
        }
       }*/
   

        stage('Docker build'){
            steps{
                sh 'docker-compose up -d'
            }
        }

       stage("commiting the deocker images"){
            steps{
                sh "docker commit b92da5457827 ravitejamanepalli/todo-app"
            }
        }

        stage("pushing the images to docker hub"){
            steps{
                withDockerRegistry([ credentialsId: "dockerhub", url: "" ]){
                    sh "docker push ravitejamanepalli/todo-app"
                }
            }
        }

        stage('deploying it to kubernetes'){
            steps{
               
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://nearby-labrador-k8s-166639b2.hcp.westus2.azmk8s.io:443') {
                    sh 'kubectl apply -f k8s/database-deployment.yaml'
                    
                }
                sleep(120)
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kube-azure', namespace: '', serverUrl: 'https://nearby-labrador-k8s-166639b2.hcp.westus2.azmk8s.io:443') {
                    sh 'kubectl apply -f k8s/api-deployment.yaml'
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                    
                }

            }
        }



    }
}